// 原码，反码，补码
// 1、二进制的最高位是符号位，0代表正数，1代表负数
// 2、正数的原码，反码，补码都一样(三码合一)
// 3、负数的反码=它的原码符号位不变，其他位取反
// 4、负数的补码=它的反码+1,负数的反码=它的补码-1,或者说是等于它的原码自低位向高位，尾数的第一个‘1’及其右边的‘0’保持不变，左边的各位按位取反，符号位不变。
// 5、0的反码，补码都是0
// 6、java中没有无符号数
// 7、在计算机运算时，都是以补码的方式(将正数与负数统一起来了)来进行运算的(重点！！！！！)
// 8、当我们看运算结果时，要看他的原码(！！！！)
public class BitwiseOperators{
	public static void main(String[] args){
		//1、首先得到2与3的补码，
		//2的原码 => 00000000 00000000 00000000 00000010
		//3的原码 => 00000000 00000000 00000000 00000011
		//2、同位都为1则为1
		// 运算后的补码，因为正数，所以三码合一
		// 00000000 00000000 00000000 00000010
		// 结果为2
		System.out.println(2&3);

		//1、先得到-2的原码,补码
		//-2的原码 => 10000000 00000000 00000000 00000010
		//-2的反码 => 11111111 11111111 11111111 11111101
		//-2的补码 => 11111111 11111111 11111111 11111110
		//2、~-2操作，对-2的补码进行按位取反的操作
		//运算后的补码：00000000 00000000 00000000 00000001
		//为正数，三码合一，结果为1
		System.out.println(~-2);

		//1、先得到2的补码，正数，三码合一
		//2的补码 => 00000000 00000000 00000000 00000010
		//2、按位取反
		//运算后的补码：11111111 11111111 11111111 11111101 为负数，需要转换为原码才能看到运算结果
		//补码-1再取反：10000000 00000000 00000000 00000011 这个才是运算的结果为-3
		System.out.println(~2);

		//三个位移运算符 >> << 和 >>> ，运算规则：
		//1、算术右移 >>:低位溢出，符号位不变，并用符号位补溢出的高位
		//2、算术左移 <<:符号位不变，低位补0
		//3、>>> 逻辑右移又叫无符号右移，运算规则是：低位溢出，高位补零
		//4、没有<<< 符号
		// 右移一位的本质就是 数/2
		// 左移一位的本质就是 数*2
		// -1的原码 => 10000000 00000000 00000000 00000001
		// -1的反码 => 11111111 11111111 11111111 11111110
		// -1的补码 => 11111111 11111111 11111111 11111111
		// 右移两位没有变化，所以原码还是-1
		System.out.println(-1>>2);
	}
}